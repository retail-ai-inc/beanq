package bgzipfuzz

// Edit if desired. Code generated by "fzgen -o ../../test/fuzz/googlefuzz_test.go .".

import (
	"context"
	"testing"

	"github.com/retail-ai-inc/beanq/v3/helper/googleAuth"
	"github.com/thepudds/fzgen/fuzzer"
)

// skipping Fuzz_GoogleOauthConfig_AuthCodeUrl because parameters include func, chan, or unsupported interface: []golang.org/x/oauth2.AuthCodeOption

func Fuzz_GoogleOauthConfig_Exchange(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var clientId string
		var clientSecret string
		var redirectUrl string
		var ctx context.Context
		var code string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&clientId, &clientSecret, &redirectUrl, &ctx, &code)

		t1, err := googleAuth.New(clientId, clientSecret, redirectUrl)
		if err != nil {
			return
		}
		t1.Exchange(ctx, code)
	})
}

func Fuzz_GoogleOauthConfig_Response(f *testing.F) {
	f.Fuzz(func(t *testing.T, clientId string, clientSecret string, redirectUrl string, accessToken string) {
		t1, err := googleAuth.New(clientId, clientSecret, redirectUrl)
		if err != nil {
			return
		}
		t1.Response(accessToken)
	})
}

func Fuzz_New(f *testing.F) {
	f.Fuzz(func(t *testing.T, clientId string, clientSecret string, redirectUrl string) {
		googleAuth.New(clientId, clientSecret, redirectUrl)
	})
}

func Fuzz_NewGoogleOauthConfig(f *testing.F) {
	f.Fuzz(func(t *testing.T, clientId string, clientSecret string, redirectUrl string) {
		googleAuth.NewGoogleOauthConfig(clientId, clientSecret, redirectUrl)
	})
}
