package bgzipfuzz

// Edit if desired. Code generated by "fzgen -o ../../test/fuzz/slackfuzz_test.go .".

import (
	"context"
	"testing"

	xslack "github.com/retail-ai-inc/beanq/v3/helper/slack"
	"github.com/slack-go/slack"
	"github.com/thepudds/fzgen/fuzzer"
)

func Fuzz_Client_Channel(f *testing.F) {
	f.Fuzz(func(t *testing.T, botAuthToken string, channel string) {
		t1 := xslack.NewClient(botAuthToken)
		t1.Channel(channel)
	})
}

func Fuzz_Client_Color(f *testing.F) {
	f.Fuzz(func(t *testing.T, botAuthToken string, color string) {
		t1 := xslack.NewClient(botAuthToken)
		t1.Color(color)
	})
}

func Fuzz_Client_Footer(f *testing.F) {
	f.Fuzz(func(t *testing.T, botAuthToken string, footer string) {
		t1 := xslack.NewClient(botAuthToken)
		t1.Footer(footer)
	})
}

func Fuzz_Client_FooterIcon(f *testing.F) {
	f.Fuzz(func(t *testing.T, botAuthToken string, icon string) {
		t1 := xslack.NewClient(botAuthToken)
		t1.FooterIcon(icon)
	})
}

func Fuzz_Client_Send(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var botAuthToken string
		var ctx context.Context
		var field []slack.AttachmentField
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&botAuthToken, &ctx, &field)

		t1 := xslack.NewClient(botAuthToken)
		t1.Send(ctx, field...)
	})
}

func Fuzz_Client_TeamInfo(f *testing.F) {
	f.Fuzz(func(t *testing.T, botAuthToken string) {
		t1 := xslack.NewClient(botAuthToken)
		t1.TeamInfo()
	})
}

func Fuzz_Client_Title(f *testing.F) {
	f.Fuzz(func(t *testing.T, botAuthToken string, title string) {
		t1 := xslack.NewClient(botAuthToken)
		t1.Title(title)
	})
}

func Fuzz_Client_TitleLink(f *testing.F) {
	f.Fuzz(func(t *testing.T, botAuthToken string, titleLink string) {
		t1 := xslack.NewClient(botAuthToken)
		t1.TitleLink(titleLink)
	})
}

func Fuzz_NewClient(f *testing.F) {
	f.Fuzz(func(t *testing.T, botAuthToken string) {
		xslack.NewClient(botAuthToken)
	})
}
