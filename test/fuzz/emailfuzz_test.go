package bgzipfuzz

// Edit if desired. Code generated by "fzgen -o ../../test/fuzz/emailfuzz_test.go .".

import (
	"testing"
	"time"

	"github.com/retail-ai-inc/beanq/v3/helper/email"
	"github.com/thepudds/fzgen/fuzzer"
)

func Fuzz_Email_Date(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var host string
		var port int
		var username string
		var password string
		var date time.Time
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&host, &port, &username, &password, &date)

		t1 := email.NewGoEmail(host, port, username, password)
		t1.Date(date)
	})
}

func Fuzz_Email_From(f *testing.F) {
	f.Fuzz(func(t *testing.T, host string, port int, username string, password string, from string) {
		t1 := email.NewGoEmail(host, port, username, password)
		t1.From(from)
	})
}

func Fuzz_Email_InviteHtmlBody(f *testing.F) {
	f.Fuzz(func(t *testing.T, host string, port int, username string, password string, title string, name string, link string) {
		t1 := email.NewGoEmail(host, port, username, password)
		t1.InviteHtmlBody(title, name, link)
	})
}

func Fuzz_Email_Send(f *testing.F) {
	f.Fuzz(func(t *testing.T, host string, port int, username string, password string) {
		t1 := email.NewGoEmail(host, port, username, password)
		t1.Send()
	})
}

func Fuzz_Email_Subject(f *testing.F) {
	f.Fuzz(func(t *testing.T, host string, port int, username string, password string, subject string) {
		t1 := email.NewGoEmail(host, port, username, password)
		t1.Subject(subject)
	})
}

func Fuzz_Email_TextBody(f *testing.F) {
	f.Fuzz(func(t *testing.T, host string, port int, username string, password string, body string) {
		t1 := email.NewGoEmail(host, port, username, password)
		t1.TextBody(body)
	})
}

func Fuzz_Email_To(f *testing.F) {
	f.Fuzz(func(t *testing.T, host string, port int, username string, password string, to string) {
		t1 := email.NewGoEmail(host, port, username, password)
		t1.To(to)
	})
}

// skipping Fuzz_NewClient because parameters include func, chan, or unsupported interface: []github.com/retail-ai-inc/beanq/v3/helper/email.Options

func Fuzz_NewGoEmail(f *testing.F) {
	f.Fuzz(func(t *testing.T, host string, port int, username string, password string) {
		email.NewGoEmail(host, port, username, password)
	})
}

func Fuzz_NewSendGrid(f *testing.F) {
	f.Fuzz(func(t *testing.T, apiKey string) {
		email.NewSendGrid(apiKey)
	})
}

// skipping Fuzz_ParseHtml because parameters include func, chan, or unsupported interface: any

func Fuzz_WithApiKey(f *testing.F) {
	f.Fuzz(func(t *testing.T, apiKey string) {
		email.WithApiKey(apiKey)
	})
}

func Fuzz_WithHost(f *testing.F) {
	f.Fuzz(func(t *testing.T, host string) {
		email.WithHost(host)
	})
}

func Fuzz_WithPassword(f *testing.F) {
	f.Fuzz(func(t *testing.T, password string) {
		email.WithPassword(password)
	})
}

func Fuzz_WithPort(f *testing.F) {
	f.Fuzz(func(t *testing.T, port int) {
		email.WithPort(port)
	})
}

func Fuzz_WithUser(f *testing.F) {
	f.Fuzz(func(t *testing.T, user string) {
		email.WithUser(user)
	})
}
